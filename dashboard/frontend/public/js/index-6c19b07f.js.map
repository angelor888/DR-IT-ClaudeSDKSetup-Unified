{"version":3,"file":"index-6c19b07f.js","sources":["../../src/features/customers/CustomerList.tsx","../../src/features/customers/CustomerForm.tsx","../../src/features/customers/CustomerDetail.tsx","../../src/features/customers/CustomerSync.tsx","../../src/features/customers/CustomerFilters.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport {\n  Box,\n  Button,\n  Chip,\n  IconButton,\n  Paper,\n  Stack,\n  Tooltip,\n  Typography,\n  TextField,\n  InputAdornment,\n  Menu,\n  MenuItem,\n  Checkbox,\n  ListItemText,\n  FormControl,\n  InputLabel,\n  Select,\n  CircularProgress,\n} from '@mui/material';\nimport { DataGrid, type GridColDef, type GridRenderCellParams } from '@mui/x-data-grid';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Archive as ArchiveIcon,\n  Unarchive as UnarchiveIcon,\n  Sync as SyncIcon,\n  Search as SearchIcon,\n  FilterList as FilterIcon,\n  Download as DownloadIcon,\n  Upload as UploadIcon,\n  MoreVert as MoreVertIcon,\n} from '@mui/icons-material';\nimport { useNavigate } from 'react-router-dom';\nimport { useGetCustomerListQuery, useArchiveCustomerMutation } from '@services/api/customerApi';\nimport { getCustomerName, formatAddress } from '@/types/customer.types';\nimport type { Customer, CustomerFilters } from '@/types/customer.types';\n\nexport const CustomerList: React.FC = () => {\n  const navigate = useNavigate();\n  const [filters, setFilters] = useState<CustomerFilters>({\n    page: 1,\n    limit: 25,\n    sortBy: 'updatedAt',\n    sortOrder: 'desc',\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [selectedCustomerId, setSelectedCustomerId] = useState<string | null>(null);\n\n  const { data, isLoading, isFetching } = useGetCustomerListQuery(filters);\n  const [archiveCustomer] = useArchiveCustomerMutation();\n\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.target.value);\n  }, []);\n\n  const handleSearchSubmit = useCallback(() => {\n    setFilters(prev => ({ ...prev, search: searchTerm, page: 1 }));\n  }, [searchTerm]);\n\n  const handleArchiveToggle = useCallback(async (customerId: string, isArchived: boolean) => {\n    try {\n      await archiveCustomer({ id: customerId, isArchived: !isArchived }).unwrap();\n    } catch (error) {\n      console.error('Failed to toggle archive status:', error);\n    }\n  }, [archiveCustomer]);\n\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, customerId: string) => {\n    setAnchorEl(event.currentTarget);\n    setSelectedCustomerId(customerId);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    setSelectedCustomerId(null);\n  };\n\n  const getSyncStatusChip = (status?: Customer['jobberSyncStatus']) => {\n    switch (status) {\n      case 'synced':\n        return <Chip label=\"Synced\" color=\"success\" size=\"small\" />;\n      case 'pending':\n        return <Chip label=\"Pending\" color=\"warning\" size=\"small\" />;\n      case 'error':\n        return <Chip label=\"Error\" color=\"error\" size=\"small\" />;\n      default:\n        return <Chip label=\"Not Synced\" color=\"default\" size=\"small\" />;\n    }\n  };\n\n  const columns: GridColDef[] = [\n    {\n      field: 'name',\n      headerName: 'Name',\n      flex: 1,\n      minWidth: 200,\n      renderCell: (params: GridRenderCellParams<Customer>) => (\n        <Box>\n          <Typography variant=\"body2\" fontWeight=\"medium\">\n            {getCustomerName(params.row)}\n          </Typography>\n          {params.row.companyName && params.row.firstName && (\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              {params.row.firstName} {params.row.lastName}\n            </Typography>\n          )}\n        </Box>\n      ),\n    },\n    {\n      field: 'email',\n      headerName: 'Email',\n      width: 200,\n    },\n    {\n      field: 'phone',\n      headerName: 'Phone',\n      width: 150,\n    },\n    {\n      field: 'address',\n      headerName: 'Address',\n      flex: 1,\n      minWidth: 250,\n      renderCell: (params: GridRenderCellParams<Customer>) => (\n        <Typography variant=\"body2\" noWrap>\n          {formatAddress(params.row.address)}\n        </Typography>\n      ),\n    },\n    {\n      field: 'jobberSyncStatus',\n      headerName: 'Sync Status',\n      width: 120,\n      renderCell: (params: GridRenderCellParams<Customer>) => \n        getSyncStatusChip(params.row.jobberSyncStatus),\n    },\n    {\n      field: 'tags',\n      headerName: 'Tags',\n      width: 200,\n      renderCell: (params: GridRenderCellParams<Customer>) => (\n        <Stack direction=\"row\" spacing={0.5}>\n          {params.row.tags?.map((tag, index) => (\n            <Chip key={index} label={tag} size=\"small\" variant=\"outlined\" />\n          ))}\n        </Stack>\n      ),\n    },\n    {\n      field: 'actions',\n      headerName: 'Actions',\n      width: 150,\n      sortable: false,\n      renderCell: (params: GridRenderCellParams<Customer>) => (\n        <Stack direction=\"row\" spacing={1}>\n          <Tooltip title=\"Edit\">\n            <IconButton\n              size=\"small\"\n              onClick={() => navigate(`/customers/${params.row.id}/edit`)}\n            >\n              <EditIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title={params.row.isArchived ? 'Unarchive' : 'Archive'}>\n            <IconButton\n              size=\"small\"\n              onClick={() => handleArchiveToggle(params.row.id, params.row.isArchived)}\n            >\n              {params.row.isArchived ? <UnarchiveIcon fontSize=\"small\" /> : <ArchiveIcon fontSize=\"small\" />}\n            </IconButton>\n          </Tooltip>\n          <IconButton\n            size=\"small\"\n            onClick={(e) => handleMenuOpen(e, params.row.id)}\n          >\n            <MoreVertIcon fontSize=\"small\" />\n          </IconButton>\n        </Stack>\n      ),\n    },\n  ];\n\n  return (\n    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n      <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Customers\n        </Typography>\n        <Stack direction=\"row\" spacing={2}>\n          <Button\n            startIcon={<UploadIcon />}\n            variant=\"outlined\"\n            onClick={() => navigate('/customers/import')}\n          >\n            Import\n          </Button>\n          <Button\n            startIcon={<DownloadIcon />}\n            variant=\"outlined\"\n            onClick={() => navigate('/customers/export')}\n          >\n            Export\n          </Button>\n          <Button\n            startIcon={<SyncIcon />}\n            variant=\"outlined\"\n            onClick={() => navigate('/customers/sync')}\n          >\n            Sync\n          </Button>\n          <Button\n            startIcon={<AddIcon />}\n            variant=\"contained\"\n            onClick={() => navigate('/customers/new')}\n          >\n            Add Customer\n          </Button>\n        </Stack>\n      </Stack>\n\n      <Paper sx={{ mb: 2, p: 2 }}>\n        <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n          <TextField\n            size=\"small\"\n            placeholder=\"Search customers...\"\n            value={searchTerm}\n            onChange={handleSearchChange}\n            onKeyPress={(e) => e.key === 'Enter' && handleSearchSubmit()}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              ),\n            }}\n            sx={{ flexGrow: 1, maxWidth: 400 }}\n          />\n          <Button\n            startIcon={<FilterIcon />}\n            variant=\"outlined\"\n            size=\"small\"\n            onClick={() => navigate('/customers/filters')}\n          >\n            Filters\n          </Button>\n        </Stack>\n      </Paper>\n\n      <Paper sx={{ flex: 1, display: 'flex', flexDirection: 'column' }}>\n        <DataGrid\n          rows={data?.customers || []}\n          columns={columns}\n          rowCount={data?.total || 0}\n          loading={isLoading || isFetching}\n          pageSizeOptions={[10, 25, 50, 100]}\n          paginationModel={{\n            page: filters.page ? filters.page - 1 : 0,\n            pageSize: filters.limit || 25,\n          }}\n          onPaginationModelChange={(model) => {\n            setFilters(prev => ({\n              ...prev,\n              page: model.page + 1,\n              limit: model.pageSize,\n            }));\n          }}\n          onSortModelChange={(model) => {\n            if (model.length > 0) {\n              setFilters(prev => ({\n                ...prev,\n                sortBy: model[0].field as any,\n                sortOrder: model[0].sort || 'asc',\n              }));\n            }\n          }}\n          disableRowSelectionOnClick\n          onRowClick={(params) => navigate(`/customers/${params.row.id}`)}\n          sx={{\n            '& .MuiDataGrid-row': {\n              cursor: 'pointer',\n            },\n          }}\n        />\n      </Paper>\n\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleMenuClose}\n      >\n        <MenuItem onClick={() => {\n          navigate(`/customers/${selectedCustomerId}`);\n          handleMenuClose();\n        }}>\n          View Details\n        </MenuItem>\n        <MenuItem onClick={() => {\n          navigate(`/customers/${selectedCustomerId}/jobs`);\n          handleMenuClose();\n        }}>\n          View Jobs\n        </MenuItem>\n        <MenuItem onClick={() => {\n          navigate(`/customers/${selectedCustomerId}/sync`);\n          handleMenuClose();\n        }}>\n          Sync with Jobber\n        </MenuItem>\n      </Menu>\n    </Box>\n  );\n};","import React, { useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Chip,\n  CircularProgress,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Radio,\n  RadioGroup,\n  Select,\n  Stack,\n  TextField,\n  Typography,\n  Autocomplete,\n} from '@mui/material';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  useGetCustomerDetailsQuery,\n  useCreateCustomerMutation,\n  useUpdateCustomerMutation,\n  useGetCustomerTagsQuery,\n} from '@services/api/customerApi';\nimport type { CustomerFormData } from '@/types/customer.types';\n\nconst schema: yup.ObjectSchema<CustomerFormData> = yup.object({\n  firstName: yup.string().optional(),\n  lastName: yup.string().optional(),\n  companyName: yup.string().optional(),\n  email: yup.string().email('Invalid email address').required('Email is required'),\n  phone: yup.string().optional().matches(/^[\\d\\s\\-\\(\\)\\+]*$/, 'Invalid phone number'),\n  address: yup.object({\n    street1: yup.string().optional(),\n    street2: yup.string().optional(),\n    city: yup.string().optional(),\n    province: yup.string().optional(),\n    postalCode: yup.string().optional(),\n    country: yup.string().optional().default('Canada'),\n  }).optional(),\n  tags: yup.array().of(yup.string().required()).optional(),\n  notes: yup.string().optional(),\n  preferredContactMethod: yup.string().oneOf(['email', 'phone', 'text']).optional(),\n}).test('name-required', 'Either company name or first name is required', function(values) {\n  return !!(values.companyName || values.firstName);\n});\n\nexport const CustomerForm: React.FC = () => {\n  const navigate = useNavigate();\n  const { id } = useParams<{ id: string }>();\n  const isEditMode = !!id;\n\n  const { data: customer, isLoading: isLoadingCustomer } = useGetCustomerDetailsQuery(id!, {\n    skip: !isEditMode,\n  });\n  const { data: availableTags } = useGetCustomerTagsQuery();\n  const [createCustomer, { isLoading: isCreating }] = useCreateCustomerMutation();\n  const [updateCustomer, { isLoading: isUpdating }] = useUpdateCustomerMutation();\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    formState: { errors, isDirty },\n  } = useForm<CustomerFormData>({\n    resolver: yupResolver(schema),\n    defaultValues: {\n      firstName: '',\n      lastName: '',\n      companyName: '',\n      email: '',\n      phone: '',\n      address: {\n        street1: '',\n        street2: '',\n        city: '',\n        province: '',\n        postalCode: '',\n        country: 'Canada',\n      },\n      tags: [],\n      notes: '',\n      preferredContactMethod: 'email',\n    },\n  });\n\n  useEffect(() => {\n    if (customer && isEditMode) {\n      reset({\n        firstName: customer.firstName || '',\n        lastName: customer.lastName || '',\n        companyName: customer.companyName || '',\n        email: customer.email || '',\n        phone: customer.phone || '',\n        address: customer.address || {\n          street1: '',\n          street2: '',\n          city: '',\n          province: '',\n          postalCode: '',\n          country: 'Canada',\n        },\n        tags: customer.tags || [],\n        notes: customer.notes || '',\n        preferredContactMethod: customer.preferredContactMethod || 'email',\n      });\n    }\n  }, [customer, isEditMode, reset]);\n\n  const onSubmit = async (data: CustomerFormData) => {\n    try {\n      if (isEditMode) {\n        await updateCustomer({ id: id!, data }).unwrap();\n      } else {\n        await createCustomer(data).unwrap();\n      }\n      navigate('/customers');\n    } catch (error) {\n      console.error('Failed to save customer:', error);\n    }\n  };\n\n  const provinces = [\n    { code: 'AB', name: 'Alberta' },\n    { code: 'BC', name: 'British Columbia' },\n    { code: 'MB', name: 'Manitoba' },\n    { code: 'NB', name: 'New Brunswick' },\n    { code: 'NL', name: 'Newfoundland and Labrador' },\n    { code: 'NS', name: 'Nova Scotia' },\n    { code: 'NT', name: 'Northwest Territories' },\n    { code: 'NU', name: 'Nunavut' },\n    { code: 'ON', name: 'Ontario' },\n    { code: 'PE', name: 'Prince Edward Island' },\n    { code: 'QC', name: 'Quebec' },\n    { code: 'SK', name: 'Saskatchewan' },\n    { code: 'YT', name: 'Yukon' },\n  ];\n\n  if (isLoadingCustomer) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight={400}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        {isEditMode ? 'Edit Customer' : 'Add New Customer'}\n      </Typography>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Stack spacing={3}>\n          <Card>\n            <CardHeader title=\"Basic Information\" />\n            <CardContent>\n              <Grid container spacing={3}>\n                <Grid size={12}>\n                  <Controller\n                    name=\"companyName\"\n                    control={control}\n                    render={({ field }) => (\n                      <TextField\n                        {...field}\n                        fullWidth\n                        label=\"Company Name\"\n                        error={!!errors.companyName}\n                        helperText={errors.companyName?.message}\n                      />\n                    )}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12, sm: 6 }}>\n                  <Controller\n                    name=\"firstName\"\n                    control={control}\n                    render={({ field }) => (\n                      <TextField\n                        {...field}\n                        fullWidth\n                        label=\"First Name\"\n                        error={!!errors.firstName}\n                        helperText={errors.firstName?.message}\n                      />\n                    )}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12, sm: 6 }}>\n                  <Controller\n                    name=\"lastName\"\n                    control={control}\n                    render={({ field }) => (\n                      <TextField\n                        {...field}\n                        fullWidth\n                        label=\"Last Name\"\n                        error={!!errors.lastName}\n                        helperText={errors.lastName?.message}\n                      />\n                    )}\n                  />\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Contact Information\" />\n            <CardContent>\n              <Grid container spacing={3}>\n                <Grid size={{ xs: 12, sm: 6 }}>\n                  <Controller\n                    name=\"email\"\n                    control={control}\n                    render={({ field }) => (\n                      <TextField\n                        {...field}\n                        fullWidth\n                        label=\"Email\"\n                        type=\"email\"\n                        error={!!errors.email}\n                        helperText={errors.email?.message}\n                      />\n                    )}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12, sm: 6 }}>\n                  <Controller\n                    name=\"phone\"\n                    control={control}\n                    render={({ field }) => (\n                      <TextField\n                        {...field}\n                        fullWidth\n                        label=\"Phone\"\n                        error={!!errors.phone}\n                        helperText={errors.phone?.message}\n                      />\n                    )}\n                  />\n                </Grid>\n                <Grid size={12}>\n                  <Controller\n                    name=\"preferredContactMethod\"\n                    control={control}\n                    render={({ field }) => (\n                      <FormControl>\n                        <RadioGroup {...field} row>\n                          <FormControlLabel value=\"email\" control={<Radio />} label=\"Email\" />\n                          <FormControlLabel value=\"phone\" control={<Radio />} label=\"Phone\" />\n                          <FormControlLabel value=\"text\" control={<Radio />} label=\"Text\" />\n                        </RadioGroup>\n                        <FormHelperText>Preferred Contact Method</FormHelperText>\n                      </FormControl>\n                    )}\n                  />\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Address\" />\n            <CardContent>\n              <Grid container spacing={3}>\n                <Grid size={12}>\n                  <Controller\n                    name=\"address.street1\"\n                    control={control}\n                    render={({ field }) => (\n                      <TextField\n                        {...field}\n                        fullWidth\n                        label=\"Street Address\"\n                        error={!!errors.address?.street1}\n                        helperText={errors.address?.street1?.message}\n                      />\n                    )}\n                  />\n                </Grid>\n                <Grid size={12}>\n                  <Controller\n                    name=\"address.street2\"\n                    control={control}\n                    render={({ field }) => (\n                      <TextField\n                        {...field}\n                        fullWidth\n                        label=\"Apartment, Suite, etc.\"\n                      />\n                    )}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12, sm: 6 }}>\n                  <Controller\n                    name=\"address.city\"\n                    control={control}\n                    render={({ field }) => (\n                      <TextField\n                        {...field}\n                        fullWidth\n                        label=\"City\"\n                        error={!!errors.address?.city}\n                        helperText={errors.address?.city?.message}\n                      />\n                    )}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12, sm: 3 }}>\n                  <Controller\n                    name=\"address.province\"\n                    control={control}\n                    render={({ field }) => (\n                      <FormControl fullWidth error={!!errors.address?.province}>\n                        <InputLabel>Province</InputLabel>\n                        <Select {...field} label=\"Province\">\n                          <MenuItem value=\"\">Select Province</MenuItem>\n                          {provinces.map(prov => (\n                            <MenuItem key={prov.code} value={prov.code}>\n                              {prov.name}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                        {errors.address?.province && (\n                          <FormHelperText>{errors.address.province.message}</FormHelperText>\n                        )}\n                      </FormControl>\n                    )}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12, sm: 3 }}>\n                  <Controller\n                    name=\"address.postalCode\"\n                    control={control}\n                    render={({ field }) => (\n                      <TextField\n                        {...field}\n                        fullWidth\n                        label=\"Postal Code\"\n                        error={!!errors.address?.postalCode}\n                        helperText={errors.address?.postalCode?.message}\n                      />\n                    )}\n                  />\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Additional Information\" />\n            <CardContent>\n              <Grid container spacing={3}>\n                <Grid size={12}>\n                  <Controller\n                    name=\"tags\"\n                    control={control}\n                    render={({ field }) => (\n                      <Autocomplete\n                        {...field}\n                        multiple\n                        options={availableTags || []}\n                        freeSolo\n                        onChange={(_, value) => field.onChange(value)}\n                        renderTags={(value, getTagProps) =>\n                          value.map((option, index) => (\n                            <Chip\n                              variant=\"outlined\"\n                              label={option}\n                              {...getTagProps({ index })}\n                              key={option}\n                            />\n                          ))\n                        }\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            label=\"Tags\"\n                            placeholder=\"Add tags\"\n                            helperText=\"Press Enter to add custom tags\"\n                          />\n                        )}\n                      />\n                    )}\n                  />\n                </Grid>\n                <Grid size={12}>\n                  <Controller\n                    name=\"notes\"\n                    control={control}\n                    render={({ field }) => (\n                      <TextField\n                        {...field}\n                        fullWidth\n                        multiline\n                        rows={4}\n                        label=\"Notes\"\n                        error={!!errors.notes}\n                        helperText={errors.notes?.message}\n                      />\n                    )}\n                  />\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n\n          <Stack direction=\"row\" spacing={2} justifyContent=\"flex-end\">\n            <Button\n              variant=\"outlined\"\n              onClick={() => navigate('/customers')}\n              disabled={isCreating || isUpdating}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              disabled={!isDirty || isCreating || isUpdating}\n            >\n              {isCreating || isUpdating ? (\n                <CircularProgress size={24} />\n              ) : (\n                isEditMode ? 'Update Customer' : 'Create Customer'\n              )}\n            </Button>\n          </Stack>\n        </Stack>\n      </form>\n    </Box>\n  );\n};","import React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Chip,\n  CircularProgress,\n  Divider,\n  Grid,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  Stack,\n  Tab,\n  Tabs,\n  Typography,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Alert,\n} from '@mui/material';\nimport {\n  Edit as EditIcon,\n  Archive as ArchiveIcon,\n  Delete as DeleteIcon,\n  Sync as SyncIcon,\n  Email as EmailIcon,\n  Phone as PhoneIcon,\n  LocationOn as LocationIcon,\n  Note as NoteIcon,\n  History as HistoryIcon,\n  Work as WorkIcon,\n} from '@mui/icons-material';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n  useGetCustomerDetailsQuery,\n  useDeleteCustomerMutation,\n  useArchiveCustomerMutation,\n  useSyncCustomerWithJobberMutation,\n  useAddCustomerNoteMutation,\n} from '@services/api/customerApi';\nimport { getCustomerName, formatAddress } from '@/types/customer.types';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst TabPanel: React.FC<TabPanelProps> = ({ children, value, index, ...other }) => {\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`customer-tabpanel-${index}`}\n      aria-labelledby={`customer-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ pt: 3 }}>{children}</Box>}\n    </div>\n  );\n};\n\nexport const CustomerDetail: React.FC = () => {\n  const navigate = useNavigate();\n  const { id } = useParams<{ id: string }>();\n  const [tabValue, setTabValue] = useState(0);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [noteDialogOpen, setNoteDialogOpen] = useState(false);\n  const [newNote, setNewNote] = useState('');\n\n  const { data: customer, isLoading } = useGetCustomerDetailsQuery(id!);\n  const [deleteCustomer, { isLoading: isDeleting }] = useDeleteCustomerMutation();\n  const [archiveCustomer, { isLoading: isArchiving }] = useArchiveCustomerMutation();\n  const [syncCustomer, { isLoading: isSyncing }] = useSyncCustomerWithJobberMutation();\n  const [addNote, { isLoading: isAddingNote }] = useAddCustomerNoteMutation();\n\n  const handleDelete = async () => {\n    try {\n      await deleteCustomer(id!).unwrap();\n      navigate('/customers');\n    } catch (error) {\n      console.error('Failed to delete customer:', error);\n    }\n  };\n\n  const handleArchive = async () => {\n    if (!customer) return;\n    try {\n      await archiveCustomer({ id: id!, isArchived: !customer.isArchived }).unwrap();\n    } catch (error) {\n      console.error('Failed to archive customer:', error);\n    }\n  };\n\n  const handleSync = async () => {\n    try {\n      await syncCustomer(id!).unwrap();\n    } catch (error) {\n      console.error('Failed to sync customer:', error);\n    }\n  };\n\n  const handleAddNote = async () => {\n    if (!newNote.trim()) return;\n    try {\n      await addNote({ customerId: id!, note: newNote }).unwrap();\n      setNewNote('');\n      setNoteDialogOpen(false);\n    } catch (error) {\n      console.error('Failed to add note:', error);\n    }\n  };\n\n  if (isLoading || !customer) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight={400}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  const getSyncStatusAlert = () => {\n    switch (customer.jobberSyncStatus) {\n      case 'synced':\n        return (\n          <Alert severity=\"success\" sx={{ mb: 2 }}>\n            Successfully synced with Jobber on {new Date(customer.lastJobberSync!).toLocaleString()}\n          </Alert>\n        );\n      case 'error':\n        return (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            Sync error: {customer.jobberSyncError}\n          </Alert>\n        );\n      case 'pending':\n        return (\n          <Alert severity=\"warning\" sx={{ mb: 2 }}>\n            Sync pending...\n          </Alert>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Box>\n      <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          {getCustomerName(customer)}\n        </Typography>\n        <Stack direction=\"row\" spacing={1}>\n          <Button\n            startIcon={isSyncing ? <CircularProgress size={20} /> : <SyncIcon />}\n            variant=\"outlined\"\n            onClick={handleSync}\n            disabled={isSyncing}\n          >\n            Sync with Jobber\n          </Button>\n          <Button\n            startIcon={<EditIcon />}\n            variant=\"contained\"\n            onClick={() => navigate(`/customers/${id}/edit`)}\n          >\n            Edit\n          </Button>\n          <IconButton\n            onClick={handleArchive}\n            disabled={isArchiving}\n            color={customer.isArchived ? 'primary' : 'default'}\n          >\n            <ArchiveIcon />\n          </IconButton>\n          <IconButton\n            onClick={() => setDeleteDialogOpen(true)}\n            color=\"error\"\n          >\n            <DeleteIcon />\n          </IconButton>\n        </Stack>\n      </Stack>\n\n      {getSyncStatusAlert()}\n\n      <Stack direction={{ xs: 'column', md: 'row' }} spacing={3}>\n        <Box sx={{ flex: { md: 1 } }}>\n          <Card>\n            <CardHeader title=\"Contact Information\" />\n            <CardContent>\n              <Stack spacing={2}>\n                {customer.email && (\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                    <EmailIcon fontSize=\"small\" color=\"action\" />\n                    <Typography variant=\"body2\">{customer.email}</Typography>\n                  </Box>\n                )}\n                {customer.phone && (\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                    <PhoneIcon fontSize=\"small\" color=\"action\" />\n                    <Typography variant=\"body2\">{customer.phone}</Typography>\n                  </Box>\n                )}\n                {customer.address && (\n                  <Box display=\"flex\" alignItems=\"flex-start\" gap={1}>\n                    <LocationIcon fontSize=\"small\" color=\"action\" />\n                    <Typography variant=\"body2\">\n                      {formatAddress(customer.address)}\n                    </Typography>\n                  </Box>\n                )}\n                <Divider />\n                <Box>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    Preferred Contact Method\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    {customer.preferredContactMethod || 'Not specified'}\n                  </Typography>\n                </Box>\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card sx={{ mt: 2 }}>\n            <CardHeader title=\"Tags\" />\n            <CardContent>\n              <Stack direction=\"row\" spacing={1} flexWrap=\"wrap\">\n                {customer.tags?.length ? (\n                  customer.tags.map((tag, index) => (\n                    <Chip key={index} label={tag} size=\"small\" />\n                  ))\n                ) : (\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    No tags\n                  </Typography>\n                )}\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card sx={{ mt: 2 }}>\n            <CardHeader title=\"Metadata\" />\n            <CardContent>\n              <Stack spacing={1}>\n                <Box>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    Customer ID\n                  </Typography>\n                  <Typography variant=\"body2\">{customer.id}</Typography>\n                </Box>\n                {customer.jobberId && (\n                  <Box>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Jobber ID\n                    </Typography>\n                    <Typography variant=\"body2\">{customer.jobberId}</Typography>\n                  </Box>\n                )}\n                <Box>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    Created\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    {new Date(customer.createdAt).toLocaleDateString()}\n                  </Typography>\n                </Box>\n                <Box>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    Last Updated\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    {new Date(customer.updatedAt).toLocaleDateString()}\n                  </Typography>\n                </Box>\n              </Stack>\n            </CardContent>\n          </Card>\n        </Box>\n\n        <Box sx={{ flex: { md: 2 } }}>\n          <Card>\n            <Tabs\n              value={tabValue}\n              onChange={(_, newValue) => setTabValue(newValue)}\n              aria-label=\"customer detail tabs\"\n            >\n              <Tab icon={<NoteIcon />} label=\"Notes\" />\n              <Tab icon={<WorkIcon />} label=\"Jobs\" />\n              <Tab icon={<HistoryIcon />} label=\"History\" />\n            </Tabs>\n\n            <TabPanel value={tabValue} index={0}>\n              <CardContent>\n                <Stack spacing={2}>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<NoteIcon />}\n                    onClick={() => setNoteDialogOpen(true)}\n                  >\n                    Add Note\n                  </Button>\n                  {customer.notes ? (\n                    <Typography variant=\"body2\" whiteSpace=\"pre-wrap\">\n                      {customer.notes}\n                    </Typography>\n                  ) : (\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      No notes available\n                    </Typography>\n                  )}\n                </Stack>\n              </CardContent>\n            </TabPanel>\n\n            <TabPanel value={tabValue} index={1}>\n              <CardContent>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Jobs functionality will be implemented in the next phase\n                </Typography>\n              </CardContent>\n            </TabPanel>\n\n            <TabPanel value={tabValue} index={2}>\n              <CardContent>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  History tracking will be implemented in the next phase\n                </Typography>\n              </CardContent>\n            </TabPanel>\n          </Card>\n        </Box>\n      </Stack>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>\n        <DialogTitle>Delete Customer</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to delete {getCustomerName(customer)}? This action cannot be undone.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\n          <Button\n            onClick={handleDelete}\n            color=\"error\"\n            variant=\"contained\"\n            disabled={isDeleting}\n          >\n            {isDeleting ? <CircularProgress size={24} /> : 'Delete'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Add Note Dialog */}\n      <Dialog open={noteDialogOpen} onClose={() => setNoteDialogOpen(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Add Note</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            multiline\n            rows={4}\n            fullWidth\n            value={newNote}\n            onChange={(e) => setNewNote(e.target.value)}\n            placeholder=\"Enter your note here...\"\n            sx={{ mt: 2 }}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setNoteDialogOpen(false)}>Cancel</Button>\n          <Button\n            onClick={handleAddNote}\n            variant=\"contained\"\n            disabled={isAddingNote || !newNote.trim()}\n          >\n            {isAddingNote ? <CircularProgress size={24} /> : 'Add Note'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};","import React, { useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  LinearProgress,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Stack,\n  Typography,\n  Chip,\n  Alert,\n  Divider,\n} from '@mui/material';\nimport {\n  Sync as SyncIcon,\n  CheckCircle as CheckIcon,\n  Error as ErrorIcon,\n  Schedule as ScheduleIcon,\n  Warning as WarningIcon,\n  Refresh as RefreshIcon,\n} from '@mui/icons-material';\nimport {\n  useGetCustomerSyncStatusQuery,\n  useSyncAllCustomersWithJobberMutation,\n} from '@services/api/customerApi';\n\nexport const CustomerSync: React.FC = () => {\n  const { \n    data: syncStatus, \n    isLoading, \n    refetch \n  } = useGetCustomerSyncStatusQuery(undefined, {\n    pollingInterval: 5000, // Poll every 5 seconds\n  });\n  \n  const [syncAllCustomers, { isLoading: isSyncing }] = useSyncAllCustomersWithJobberMutation();\n\n  const handleSyncAll = async () => {\n    try {\n      await syncAllCustomers().unwrap();\n      // Refetch status after initiating sync\n      refetch();\n    } catch (error) {\n      console.error('Failed to start sync:', error);\n    }\n  };\n\n  const getSyncProgress = () => {\n    if (!syncStatus) return 0;\n    const { totalCustomers, syncedCustomers } = syncStatus;\n    if (totalCustomers === 0) return 0;\n    return (syncedCustomers / totalCustomers) * 100;\n  };\n\n  const getSyncStatusIcon = (status: string) => {\n    switch (status) {\n      case 'synced':\n        return <CheckIcon color=\"success\" />;\n      case 'error':\n        return <ErrorIcon color=\"error\" />;\n      case 'pending':\n        return <ScheduleIcon color=\"warning\" />;\n      default:\n        return <WarningIcon color=\"disabled\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight={400}>\n        <Typography>Loading sync status...</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Jobber Sync Status\n        </Typography>\n        <Stack direction=\"row\" spacing={2}>\n          <Button\n            startIcon={<RefreshIcon />}\n            variant=\"outlined\"\n            onClick={() => refetch()}\n          >\n            Refresh\n          </Button>\n          <Button\n            startIcon={isSyncing ? <SyncIcon className=\"animate-spin\" /> : <SyncIcon />}\n            variant=\"contained\"\n            onClick={handleSyncAll}\n            disabled={isSyncing || syncStatus?.isRunning}\n          >\n            {isSyncing || syncStatus?.isRunning ? 'Syncing...' : 'Sync All Customers'}\n          </Button>\n        </Stack>\n      </Stack>\n\n      {syncStatus?.isRunning && (\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\n          <Typography variant=\"body2\">\n            Sync is currently running. This page will automatically update with progress.\n          </Typography>\n        </Alert>\n      )}\n\n      <Stack spacing={3}>\n        <Card>\n          <CardHeader title=\"Sync Overview\" />\n          <CardContent>\n            <Stack spacing={3}>\n              <Box>\n                <Typography variant=\"h6\" gutterBottom>\n                  Overall Progress\n                </Typography>\n                <LinearProgress \n                  variant=\"determinate\" \n                  value={getSyncProgress()} \n                  sx={{ height: 8, borderRadius: 4 }}\n                />\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n                  {syncStatus?.syncedCustomers || 0} of {syncStatus?.totalCustomers || 0} customers processed\n                </Typography>\n              </Box>\n\n              <Stack direction=\"row\" spacing={4}>\n                <Box textAlign=\"center\">\n                  <Typography variant=\"h4\" color=\"success.main\">\n                    {syncStatus?.syncedCustomers || 0}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Synced\n                  </Typography>\n                </Box>\n                <Box textAlign=\"center\">\n                  <Typography variant=\"h4\" color=\"warning.main\">\n                    {syncStatus?.pendingCustomers || 0}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Pending\n                  </Typography>\n                </Box>\n                <Box textAlign=\"center\">\n                  <Typography variant=\"h4\" color=\"error.main\">\n                    {syncStatus?.errorCustomers || 0}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Errors\n                  </Typography>\n                </Box>\n              </Stack>\n\n              {syncStatus?.lastSync && (\n                <Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Last sync completed: {new Date(syncStatus.lastSync).toLocaleString()}\n                  </Typography>\n                </Box>\n              )}\n            </Stack>\n          </CardContent>\n        </Card>\n\n        {syncStatus?.errors && syncStatus.errors.length > 0 && (\n          <Card>\n            <CardHeader \n              title=\"Sync Errors\" \n              action={\n                <Chip \n                  label={syncStatus.errors.length} \n                  color=\"error\" \n                  size=\"small\" \n                />\n              }\n            />\n            <CardContent>\n              <List>\n                {syncStatus.errors?.map((error, index) => (\n                  <React.Fragment key={index}>\n                    <ListItem alignItems=\"flex-start\">\n                      <ListItemIcon>\n                        <ErrorIcon color=\"error\" />\n                      </ListItemIcon>\n                      <ListItemText\n                        primary={`Customer ID: ${error.customerId}`}\n                        secondary={\n                          <Stack spacing={1}>\n                            <Typography variant=\"body2\" color=\"error\">\n                              {error.error}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              {new Date(error.timestamp).toLocaleString()}\n                            </Typography>\n                          </Stack>\n                        }\n                      />\n                    </ListItem>\n                    {index < (syncStatus.errors?.length || 0) - 1 && <Divider />}\n                  </React.Fragment>\n                ))}\n              </List>\n            </CardContent>\n          </Card>\n        )}\n\n        <Card>\n          <CardHeader title=\"Sync Information\" />\n          <CardContent>\n            <Stack spacing={2}>\n              <Alert severity=\"info\">\n                <Typography variant=\"body2\">\n                  Customer sync pulls data from Jobber and updates local customer records. \n                  This includes contact information, addresses, and metadata.\n                </Typography>\n              </Alert>\n              \n              <List>\n                <ListItem>\n                  <ListItemIcon>\n                    {getSyncStatusIcon('synced')}\n                  </ListItemIcon>\n                  <ListItemText\n                    primary=\"Synced\"\n                    secondary=\"Customer data successfully synchronized with Jobber\"\n                  />\n                </ListItem>\n                <ListItem>\n                  <ListItemIcon>\n                    {getSyncStatusIcon('pending')}\n                  </ListItemIcon>\n                  <ListItemText\n                    primary=\"Pending\"\n                    secondary=\"Customer is queued for synchronization\"\n                  />\n                </ListItem>\n                <ListItem>\n                  <ListItemIcon>\n                    {getSyncStatusIcon('error')}\n                  </ListItemIcon>\n                  <ListItemText\n                    primary=\"Error\"\n                    secondary=\"Synchronization failed - check error details above\"\n                  />\n                </ListItem>\n                <ListItem>\n                  <ListItemIcon>\n                    {getSyncStatusIcon('not_synced')}\n                  </ListItemIcon>\n                  <ListItemText\n                    primary=\"Not Synced\"\n                    secondary=\"Customer has not been synchronized with Jobber\"\n                  />\n                </ListItem>\n              </List>\n            </Stack>\n          </CardContent>\n        </Card>\n      </Stack>\n    </Box>\n  );\n};","import React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  Drawer,\n  FormControl,\n  FormControlLabel,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  Select,\n  Stack,\n  Switch,\n  TextField,\n  Typography,\n  Chip,\n  Autocomplete,\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  FilterListOff as ClearIcon,\n} from '@mui/icons-material';\nimport { useGetCustomerTagsQuery } from '@services/api/customerApi';\nimport type { CustomerFilters } from '@/types/customer.types';\n\ninterface CustomerFiltersDrawerProps {\n  open: boolean;\n  onClose: () => void;\n  filters: CustomerFilters;\n  onFiltersChange: (filters: CustomerFilters) => void;\n}\n\nexport const CustomerFiltersDrawer: React.FC<CustomerFiltersDrawerProps> = ({\n  open,\n  onClose,\n  filters,\n  onFiltersChange,\n}) => {\n  const [localFilters, setLocalFilters] = useState<CustomerFilters>(filters);\n  const { data: availableTags } = useGetCustomerTagsQuery();\n\n  const handleChange = (field: keyof CustomerFilters, value: any) => {\n    setLocalFilters(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleApply = () => {\n    onFiltersChange(localFilters);\n    onClose();\n  };\n\n  const handleClear = () => {\n    const clearedFilters: CustomerFilters = {\n      page: 1,\n      limit: filters.limit || 25,\n      sortBy: 'updatedAt',\n      sortOrder: 'desc',\n    };\n    setLocalFilters(clearedFilters);\n    onFiltersChange(clearedFilters);\n  };\n\n  const provinces = [\n    'AB', 'BC', 'MB', 'NB', 'NL', 'NS', 'NT', 'NU', 'ON', 'PE', 'QC', 'SK', 'YT'\n  ];\n\n  return (\n    <Drawer\n      anchor=\"right\"\n      open={open}\n      onClose={onClose}\n      PaperProps={{ sx: { width: 400, p: 3 } }}\n    >\n      <Stack spacing={3}>\n        <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Typography variant=\"h6\">Filter Customers</Typography>\n          <IconButton onClick={onClose} edge=\"end\">\n            <CloseIcon />\n          </IconButton>\n        </Stack>\n\n        <FormControlLabel\n          control={\n            <Switch\n              checked={localFilters.isArchived || false}\n              onChange={(e) => handleChange('isArchived', e.target.checked)}\n            />\n          }\n          label=\"Show Archived Customers\"\n        />\n\n        <FormControl fullWidth>\n          <InputLabel>Sync Status</InputLabel>\n          <Select\n            value={localFilters.jobberSyncStatus || ''}\n            onChange={(e) => handleChange('jobberSyncStatus', e.target.value || undefined)}\n            label=\"Sync Status\"\n          >\n            <MenuItem value=\"\">All</MenuItem>\n            <MenuItem value=\"synced\">Synced</MenuItem>\n            <MenuItem value=\"pending\">Pending</MenuItem>\n            <MenuItem value=\"error\">Error</MenuItem>\n            <MenuItem value=\"not_synced\">Not Synced</MenuItem>\n          </Select>\n        </FormControl>\n\n        <Autocomplete\n          multiple\n          options={availableTags || []}\n          value={localFilters.tags || []}\n          onChange={(_, value) => handleChange('tags', value)}\n          renderTags={(value, getTagProps) =>\n            value.map((option, index) => (\n              <Chip\n                variant=\"outlined\"\n                label={option}\n                {...getTagProps({ index })}\n                key={option}\n              />\n            ))\n          }\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"Tags\"\n              placeholder=\"Select tags\"\n            />\n          )}\n        />\n\n        <TextField\n          fullWidth\n          label=\"City\"\n          value={localFilters.city || ''}\n          onChange={(e) => handleChange('city', e.target.value || undefined)}\n        />\n\n        <FormControl fullWidth>\n          <InputLabel>Province</InputLabel>\n          <Select\n            value={localFilters.province || ''}\n            onChange={(e) => handleChange('province', e.target.value || undefined)}\n            label=\"Province\"\n          >\n            <MenuItem value=\"\">All</MenuItem>\n            {provinces.map(prov => (\n              <MenuItem key={prov} value={prov}>{prov}</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n\n        <FormControl fullWidth>\n          <InputLabel>Sort By</InputLabel>\n          <Select\n            value={localFilters.sortBy || 'updatedAt'}\n            onChange={(e) => handleChange('sortBy', e.target.value)}\n            label=\"Sort By\"\n          >\n            <MenuItem value=\"name\">Name</MenuItem>\n            <MenuItem value=\"email\">Email</MenuItem>\n            <MenuItem value=\"createdAt\">Created Date</MenuItem>\n            <MenuItem value=\"updatedAt\">Updated Date</MenuItem>\n          </Select>\n        </FormControl>\n\n        <FormControl fullWidth>\n          <InputLabel>Sort Order</InputLabel>\n          <Select\n            value={localFilters.sortOrder || 'desc'}\n            onChange={(e) => handleChange('sortOrder', e.target.value)}\n            label=\"Sort Order\"\n          >\n            <MenuItem value=\"asc\">Ascending</MenuItem>\n            <MenuItem value=\"desc\">Descending</MenuItem>\n          </Select>\n        </FormControl>\n\n        <Stack direction=\"row\" spacing={2} sx={{ mt: 3 }}>\n          <Button\n            fullWidth\n            variant=\"outlined\"\n            startIcon={<ClearIcon />}\n            onClick={handleClear}\n          >\n            Clear Filters\n          </Button>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            onClick={handleApply}\n          >\n            Apply Filters\n          </Button>\n        </Stack>\n      </Stack>\n    </Drawer>\n  );\n};"],"names":["CustomerList","navigate","useNavigate","filters","setFilters","useState","searchTerm","setSearchTerm","anchorEl","setAnchorEl","selectedCustomerId","setSelectedCustomerId","data","isLoading","isFetching","useGetCustomerListQuery","archiveCustomer","useArchiveCustomerMutation","handleSearchChange","useCallback","e","handleSearchSubmit","prev","handleArchiveToggle","customerId","isArchived","error","handleMenuOpen","event","handleMenuClose","getSyncStatusChip","status","Chip","columns","params","jsxs","Box","jsx","Typography","getCustomerName","formatAddress","Stack","_a","tag","index","Tooltip","IconButton","EditIcon","UnarchiveIcon","ArchiveIcon","MoreVertIcon","Button","UploadIcon","DownloadIcon","SyncIcon","AddIcon","Paper","TextField","InputAdornment","SearchIcon","FilterIcon","DataGrid","model","Menu","MenuItem","schema","yup.object","yup.string","yup.array","values","CustomerForm","id","useParams","isEditMode","customer","isLoadingCustomer","useGetCustomerDetailsQuery","availableTags","useGetCustomerTagsQuery","createCustomer","isCreating","useCreateCustomerMutation","updateCustomer","isUpdating","useUpdateCustomerMutation","control","handleSubmit","reset","errors","isDirty","useForm","yupResolver","useEffect","onSubmit","provinces","CircularProgress","Card","CardHeader","CardContent","Grid","Controller","field","FormControl","RadioGroup","FormControlLabel","Radio","FormHelperText","_c","_b","InputLabel","Select","prov","Autocomplete","_","value","getTagProps","option","createElement","TabPanel","children","other","CustomerDetail","tabValue","setTabValue","deleteDialogOpen","setDeleteDialogOpen","noteDialogOpen","setNoteDialogOpen","newNote","setNewNote","deleteCustomer","isDeleting","useDeleteCustomerMutation","isArchiving","syncCustomer","isSyncing","useSyncCustomerWithJobberMutation","addNote","isAddingNote","useAddCustomerNoteMutation","handleDelete","handleArchive","handleSync","handleAddNote","getSyncStatusAlert","Alert","DeleteIcon","EmailIcon","PhoneIcon","LocationIcon","Divider","Tabs","newValue","Tab","NoteIcon","WorkIcon","HistoryIcon","Dialog","DialogTitle","DialogContent","DialogActions","CustomerSync","syncStatus","refetch","useGetCustomerSyncStatusQuery","syncAllCustomers","useSyncAllCustomersWithJobberMutation","handleSyncAll","getSyncProgress","totalCustomers","syncedCustomers","getSyncStatusIcon","CheckIcon","ErrorIcon","ScheduleIcon","WarningIcon","RefreshIcon","LinearProgress","List","React","ListItem","ListItemIcon","ListItemText","CustomerFiltersDrawer","open","onClose","onFiltersChange","localFilters","setLocalFilters","handleChange","handleApply","handleClear","clearedFilters","Drawer","CloseIcon","Switch","ClearIcon"],"mappings":"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"}