{"version":3,"file":"WorkflowTemplates-34d0c499.js","sources":["../../src/features/ai-learning/WorkflowTemplates.tsx"],"sourcesContent":["import { useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Button,\n  Chip,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  Paper,\n  Tabs,\n  Tab,\n  Rating,\n  LinearProgress,\n} from '@mui/material';\nimport {\n  PlayArrow as PlayArrowIcon,\n  Schedule as ScheduleIcon,\n  TrendingUp as TrendingUpIcon,\n  Build as BuildIcon,\n  CheckCircle as CheckCircleIcon,\n} from '@mui/icons-material';\n\ninterface WorkflowStep {\n  order: number;\n  title: string;\n  description: string;\n  type: 'manual' | 'automated' | 'ai_assisted';\n  estimatedTime?: number;\n}\n\ninterface WorkflowTemplate {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  estimatedTime: number;\n  estimatedSavings: number;\n  steps: WorkflowStep[];\n  rating: number;\n  implementationCount: number;\n  successRate: number;\n  tags: string[];\n}\n\nconst mockTemplates: WorkflowTemplate[] = [\n  {\n    id: '1',\n    title: 'Customer Onboarding Automation',\n    description: 'Streamline new customer setup with automated welcome emails and data collection',\n    category: 'customer_onboarding',\n    difficulty: 'beginner',\n    estimatedTime: 45,\n    estimatedSavings: 20,\n    steps: [\n      {\n        order: 1,\n        title: 'Set up welcome email template',\n        description: 'Create a personalized welcome email with company information',\n        type: 'manual',\n        estimatedTime: 15,\n      },\n      {\n        order: 2,\n        title: 'Configure auto-responder',\n        description: 'Set up automated email trigger for new customers',\n        type: 'automated',\n        estimatedTime: 10,\n      },\n      {\n        order: 3,\n        title: 'Create intake form',\n        description: 'Build customer information collection form',\n        type: 'manual',\n        estimatedTime: 20,\n      },\n    ],\n    rating: 4.8,\n    implementationCount: 156,\n    successRate: 92,\n    tags: ['onboarding', 'email', 'automation'],\n  },\n  {\n    id: '2',\n    title: 'Smart Job Scheduling System',\n    description: 'AI-powered job scheduling that optimizes routes and technician availability',\n    category: 'job_management',\n    difficulty: 'advanced',\n    estimatedTime: 120,\n    estimatedSavings: 60,\n    steps: [\n      {\n        order: 1,\n        title: 'Analyze current scheduling patterns',\n        description: 'Review existing job data to identify optimization opportunities',\n        type: 'ai_assisted',\n        estimatedTime: 30,\n      },\n      {\n        order: 2,\n        title: 'Configure AI parameters',\n        description: 'Set up constraints and preferences for scheduling algorithm',\n        type: 'manual',\n        estimatedTime: 45,\n      },\n      {\n        order: 3,\n        title: 'Implement automated scheduling',\n        description: 'Deploy AI scheduler with Jobber integration',\n        type: 'automated',\n        estimatedTime: 45,\n      },\n    ],\n    rating: 4.6,\n    implementationCount: 89,\n    successRate: 85,\n    tags: ['scheduling', 'ai', 'optimization'],\n  },\n];\n\nconst categories = [\n  { id: 'all', label: 'All Templates' },\n  { id: 'customer_onboarding', label: 'Customer Onboarding' },\n  { id: 'job_management', label: 'Job Management' },\n  { id: 'communication', label: 'Communication' },\n  { id: 'reporting', label: 'Reporting' },\n];\n\nexport const WorkflowTemplates = () => {\n  const [templates] = useState<WorkflowTemplate[]>(mockTemplates);\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [expandedTemplate, setExpandedTemplate] = useState<string | null>(null);\n\n  const filteredTemplates = templates.filter(template => \n    selectedCategory === 'all' || template.category === selectedCategory\n  );\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'success';\n      case 'intermediate': return 'warning';\n      case 'advanced': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const getStepIcon = (type: string) => {\n    switch (type) {\n      case 'manual': return 'üë§';\n      case 'automated': return 'ü§ñ';\n      case 'ai_assisted': return '‚ú®';\n      default: return 'üìù';\n    }\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Box sx={{ mb: 4 }}>\n        <Typography variant=\"h4\" gutterBottom sx={{ fontWeight: 'bold' }}>\n          Workflow Templates\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Pre-built automations to jumpstart your AI journey\n        </Typography>\n      </Box>\n      {/* Category Tabs */}\n      <Tabs \n        value={selectedCategory} \n        onChange={(_, value) => setSelectedCategory(value)}\n        sx={{ mb: 3 }}\n      >\n        {categories.map(cat => (\n          <Tab key={cat.id} label={cat.label} value={cat.id} />\n        ))}\n      </Tabs>\n      {/* Template Cards */}\n      <Grid container spacing={3}>\n        {filteredTemplates.map(template => (\n          <Grid key={template.id} size={12}>\n            <Card>\n              <CardContent>\n                <Grid container spacing={2}>\n                  <Grid\n                    size={{\n                      xs: 12,\n                      md: 8\n                    }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1 }}>\n                      <Typography variant=\"h6\">\n                        {template.title}\n                      </Typography>\n                      <Chip \n                        label={template.difficulty} \n                        size=\"small\" \n                        color={getDifficultyColor(template.difficulty) as any}\n                      />\n                    </Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                      {template.description}\n                    </Typography>\n                    \n                    <Box sx={{ display: 'flex', gap: 0.5, flexWrap: 'wrap', mb: 2 }}>\n                      {template.tags.map(tag => (\n                        <Chip key={tag} label={tag} size=\"small\" variant=\"outlined\" />\n                      ))}\n                    </Box>\n                  </Grid>\n                  \n                  <Grid\n                    size={{\n                      xs: 12,\n                      md: 4\n                    }}>\n                    <Paper sx={{ p: 2, bgcolor: 'grey.50' }}>\n                      <Grid container spacing={2}>\n                        <Grid size={6}>\n                          <Box sx={{ textAlign: 'center' }}>\n                            <ScheduleIcon color=\"action\" />\n                            <Typography variant=\"h6\">{template.estimatedTime}m</Typography>\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              Setup time\n                            </Typography>\n                          </Box>\n                        </Grid>\n                        <Grid size={6}>\n                          <Box sx={{ textAlign: 'center' }}>\n                            <TrendingUpIcon color=\"success\" />\n                            <Typography variant=\"h6\">{template.estimatedSavings}m</Typography>\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              Saved per use\n                            </Typography>\n                          </Box>\n                        </Grid>\n                        <Grid size={12}>\n                          <Box sx={{ mt: 1 }}>\n                            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                              <Typography variant=\"caption\">Success Rate</Typography>\n                              <Typography variant=\"caption\">{template.successRate}%</Typography>\n                            </Box>\n                            <LinearProgress \n                              variant=\"determinate\" \n                              value={template.successRate} \n                              color=\"success\"\n                            />\n                          </Box>\n                        </Grid>\n                      </Grid>\n                    </Paper>\n                  </Grid>\n                </Grid>\n\n                {/* Expandable Steps */}\n                {expandedTemplate === template.id && (\n                  <Box sx={{ mt: 3 }}>\n                    <Stepper orientation=\"vertical\">\n                      {template.steps.map((step, index) => (\n                        <Step key={index} active>\n                          <StepLabel\n                            icon={<Box sx={{ fontSize: '1.5rem' }}>{getStepIcon(step.type)}</Box>}\n                          >\n                            {step.title}\n                          </StepLabel>\n                          <StepContent>\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                              {step.description}\n                            </Typography>\n                            {step.estimatedTime && (\n                              <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1 }}>\n                                Estimated time: {step.estimatedTime} minutes\n                              </Typography>\n                            )}\n                          </StepContent>\n                        </Step>\n                      ))}\n                    </Stepper>\n                  </Box>\n                )}\n\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mt: 2 }}>\n                  <Rating value={template.rating} precision={0.1} size=\"small\" readOnly />\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {template.rating} ‚Ä¢ {template.implementationCount} implementations\n                  </Typography>\n                </Box>\n              </CardContent>\n              \n              <CardActions>\n                <Button\n                  variant=\"text\"\n                  onClick={() => setExpandedTemplate(\n                    expandedTemplate === template.id ? null : template.id\n                  )}\n                >\n                  {expandedTemplate === template.id ? 'Hide Steps' : 'View Steps'}\n                </Button>\n                <Button \n                  variant=\"contained\" \n                  startIcon={<PlayArrowIcon />}\n                  sx={{ ml: 'auto' }}\n                >\n                  Start Implementation\n                </Button>\n              </CardActions>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n      {/* Coming Soon Card */}\n      <Box sx={{ mt: 3 }}>\n        <Card sx={{ bgcolor: 'primary.50', borderStyle: 'dashed' }}>\n          <CardContent sx={{ textAlign: 'center', py: 4 }}>\n            <BuildIcon sx={{ fontSize: 48, color: 'primary.main', mb: 2 }} />\n            <Typography variant=\"h6\" color=\"primary\">\n              More Templates Coming Soon\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              We're constantly adding new workflow templates based on user feedback\n            </Typography>\n          </CardContent>\n        </Card>\n      </Box>\n    </Box>\n  );\n};"],"names":["mockTemplates","categories","WorkflowTemplates","templates","useState","selectedCategory","setSelectedCategory","expandedTemplate","setExpandedTemplate","filteredTemplates","template","getDifficultyColor","difficulty","getStepIcon","type","Box","jsxs","jsx","Typography","Tabs","_","value","cat","Tab","Grid","Card","CardContent","Chip","tag","Paper","ScheduleIcon","TrendingUpIcon","LinearProgress","Stepper","step","index","Step","StepLabel","StepContent","Rating","CardActions","Button","PlayArrowIcon","BuildIcon"],"mappings":"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"}