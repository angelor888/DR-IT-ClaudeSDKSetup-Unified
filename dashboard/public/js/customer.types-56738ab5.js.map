{"version":3,"file":"customer.types-56738ab5.js","sources":["../../src/services/api/customerApi.ts","../../src/types/customer.types.ts"],"sourcesContent":["import { dashboardApi } from './dashboardApi';\nimport type { \n  Customer, \n  CustomerFilters, \n  CustomerListResponse, \n  CustomerFormData,\n  CustomerSyncStatus,\n  CustomerImportData\n} from '@/types/customer.types';\n\n// Extend the base API with customer-specific endpoints\nexport const customerApi = dashboardApi.injectEndpoints({\n  endpoints: (builder) => ({\n    // Get paginated customers with filters\n    getCustomerList: builder.query<CustomerListResponse, CustomerFilters>({\n      query: (filters) => ({\n        url: 'customers',\n        params: filters,\n      }),\n      providesTags: (result) =>\n        result\n          ? [\n              ...result.customers.map(({ id }) => ({ type: 'Customer' as const, id })),\n              { type: 'Customer', id: 'LIST' },\n            ]\n          : [{ type: 'Customer', id: 'LIST' }],\n    }),\n\n    // Get single customer with properties\n    getCustomerDetails: builder.query<Customer, string>({\n      query: (id) => `customers/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Customer', id }],\n    }),\n\n    // Create new customer\n    createCustomer: builder.mutation<Customer, CustomerFormData>({\n      query: (customer) => ({\n        url: 'customers',\n        method: 'POST',\n        body: customer,\n      }),\n      invalidatesTags: [{ type: 'Customer', id: 'LIST' }],\n    }),\n\n    // Update customer\n    updateCustomer: builder.mutation<Customer, { id: string; data: CustomerFormData }>({\n      query: ({ id, data }) => ({\n        url: `customers/${id}`,\n        method: 'PUT',\n        body: data,\n      }),\n      invalidatesTags: (result, error, { id }) => [\n        { type: 'Customer', id },\n        { type: 'Customer', id: 'LIST' },\n      ],\n    }),\n\n    // Archive/unarchive customer\n    archiveCustomer: builder.mutation<Customer, { id: string; isArchived: boolean }>({\n      query: ({ id, isArchived }) => ({\n        url: `customers/${id}/archive`,\n        method: 'PATCH',\n        body: { isArchived },\n      }),\n      invalidatesTags: (result, error, { id }) => [\n        { type: 'Customer', id },\n        { type: 'Customer', id: 'LIST' },\n      ],\n    }),\n\n    // Delete customer\n    deleteCustomer: builder.mutation<void, string>({\n      query: (id) => ({\n        url: `customers/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: [{ type: 'Customer', id: 'LIST' }],\n    }),\n\n    // Sync with Jobber\n    syncCustomerWithJobber: builder.mutation<Customer, string>({\n      query: (id) => ({\n        url: `customers/${id}/sync-jobber`,\n        method: 'POST',\n      }),\n      invalidatesTags: (result, error, id) => [{ type: 'Customer', id }],\n    }),\n\n    // Bulk sync with Jobber\n    syncAllCustomersWithJobber: builder.mutation<CustomerSyncStatus, void>({\n      query: () => ({\n        url: 'customers/sync-jobber',\n        method: 'POST',\n      }),\n      invalidatesTags: [{ type: 'Customer', id: 'LIST' }],\n    }),\n\n    // Get sync status\n    getCustomerSyncStatus: builder.query<CustomerSyncStatus, void>({\n      query: () => 'customers/sync-status',\n      providesTags: ['CustomerSync'],\n    }),\n\n    // Import customers\n    importCustomers: builder.mutation<\n      { imported: number; skipped: number; errors: string[] },\n      CustomerImportData\n    >({\n      query: (importData) => ({\n        url: 'customers/import',\n        method: 'POST',\n        body: importData,\n      }),\n      invalidatesTags: [{ type: 'Customer', id: 'LIST' }],\n    }),\n\n    // Export customers\n    exportCustomers: builder.query<Blob, CustomerFilters>({\n      query: (filters) => ({\n        url: 'customers/export',\n        params: { ...filters, format: 'csv' },\n        responseHandler: (response) => response.blob(),\n      }),\n    }),\n\n    // Get customer tags\n    getCustomerTags: builder.query<string[], void>({\n      query: () => 'customers/tags',\n      providesTags: ['CustomerTags'],\n    }),\n\n    // Add customer note\n    addCustomerNote: builder.mutation<\n      Customer,\n      { customerId: string; note: string }\n    >({\n      query: ({ customerId, note }) => ({\n        url: `customers/${customerId}/notes`,\n        method: 'POST',\n        body: { note },\n      }),\n      invalidatesTags: (result, error, { customerId }) => [\n        { type: 'Customer', id: customerId },\n      ],\n    }),\n  }),\n});\n\n// Export hooks for usage in functional components\nexport const {\n  useGetCustomerListQuery,\n  useGetCustomerDetailsQuery,\n  useCreateCustomerMutation,\n  useUpdateCustomerMutation,\n  useArchiveCustomerMutation,\n  useDeleteCustomerMutation,\n  useSyncCustomerWithJobberMutation,\n  useSyncAllCustomersWithJobberMutation,\n  useGetCustomerSyncStatusQuery,\n  useImportCustomersMutation,\n  useLazyExportCustomersQuery,\n  useGetCustomerTagsQuery,\n  useAddCustomerNoteMutation,\n} = customerApi;","// Customer type definitions aligned with Jobber's client model\n\nexport interface Address {\n  street1?: string;\n  street2?: string;\n  city?: string;\n  province?: string;\n  postalCode?: string;\n  country?: string;\n}\n\nexport interface Customer {\n  id: string;\n  firstName?: string;\n  lastName?: string;\n  companyName?: string;\n  email?: string;\n  phone?: string;\n  address?: Address;\n  isArchived: boolean;\n  \n  // Jobber sync metadata\n  jobberId?: string;\n  jobberSyncStatus?: 'synced' | 'pending' | 'error' | 'not_synced';\n  lastJobberSync?: string;\n  jobberSyncError?: string;\n  \n  // Additional fields\n  tags?: string[];\n  notes?: string;\n  preferredContactMethod?: 'email' | 'phone' | 'text';\n  \n  // Timestamps\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface CustomerProperty {\n  id: string;\n  customerId: string;\n  address?: Address;\n  mapUrl?: string;\n  taxRate?: number;\n  isPrimary: boolean;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface CustomerFilters {\n  search?: string;\n  isArchived?: boolean;\n  jobberSyncStatus?: Customer['jobberSyncStatus'];\n  tags?: string[];\n  city?: string;\n  province?: string;\n  sortBy?: 'name' | 'email' | 'createdAt' | 'updatedAt';\n  sortOrder?: 'asc' | 'desc';\n  page?: number;\n  limit?: number;\n}\n\nexport interface CustomerListResponse {\n  customers: Customer[];\n  total: number;\n  page: number;\n  limit: number;\n  hasMore: boolean;\n}\n\nexport interface CustomerFormData {\n  firstName?: string;\n  lastName?: string;\n  companyName?: string;\n  email?: string;\n  phone?: string;\n  address?: Address;\n  tags?: string[];\n  notes?: string;\n  preferredContactMethod?: 'email' | 'phone' | 'text';\n}\n\nexport interface CustomerImportData {\n  source: 'jobber' | 'csv' | 'manual';\n  data: CustomerFormData[];\n  options?: {\n    skipDuplicates?: boolean;\n    updateExisting?: boolean;\n    dryRun?: boolean;\n  };\n}\n\nexport interface CustomerSyncStatus {\n  isRunning: boolean;\n  lastSync?: string;\n  totalCustomers: number;\n  syncedCustomers: number;\n  pendingCustomers: number;\n  errorCustomers: number;\n  errors?: Array<{\n    customerId: string;\n    error: string;\n    timestamp: string;\n  }>;\n}\n\n// Helper function to get full customer name\nexport const getCustomerName = (customer: Customer): string => {\n  if (customer.companyName) {\n    return customer.companyName;\n  }\n  const parts = [customer.firstName, customer.lastName].filter(Boolean);\n  return parts.length > 0 ? parts.join(' ') : 'Unnamed Customer';\n};\n\n// Helper function to format address\nexport const formatAddress = (address?: Address): string => {\n  if (!address) return '';\n  \n  const parts = [\n    address.street1,\n    address.street2,\n    address.city,\n    address.province,\n    address.postalCode,\n    address.country\n  ].filter(Boolean);\n  \n  return parts.join(', ');\n};"],"names":["customerApi","dashboardApi","builder","filters","result","id","error","customer","data","isArchived","importData","response","customerId","note","useGetCustomerListQuery","useGetCustomerDetailsQuery","useCreateCustomerMutation","useUpdateCustomerMutation","useArchiveCustomerMutation","useDeleteCustomerMutation","useSyncCustomerWithJobberMutation","useSyncAllCustomersWithJobberMutation","useGetCustomerSyncStatusQuery","useImportCustomersMutation","useLazyExportCustomersQuery","useGetCustomerTagsQuery","useAddCustomerNoteMutation","getCustomerName","parts","formatAddress","address"],"mappings":"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"}