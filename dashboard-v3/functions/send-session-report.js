const axios = require('axios');

// Configuration
const SLACK_BOT_TOKEN = process.env.SLACK_BOT_TOKEN;
const CHANNEL_ID = 'C094JMFJEDD'; // #it-report

async function sendSessionReport() {
  const message = {
    channel: CHANNEL_ID,
    blocks: [
      {
        type: "header",
        text: {
          type: "plain_text",
          text: "üéØ DuetRight Dashboard V3 - Session Report",
          emoji: true
        }
      },
      {
        type: "section",
        text: {
          type: "mrkdwn",
          text: "*Session Date:* July 14, 2025\n*Focus:* Jobber Integration Error Resolution & Dashboard V3 Setup"
        }
      },
      {
        type: "divider"
      },
      {
        type: "section",
        text: {
          type: "mrkdwn",
          text: "*üîß Jobber 500 Error Fix*\n\n‚Ä¢ *Issue:* Jobs API returning 500 errors due to incorrect endpoint\n‚Ä¢ *Root Cause:* Using `/customers` instead of `/clients` endpoint\n‚Ä¢ *Solution:* Updated JobberService to use correct endpoint pattern\n‚Ä¢ *Status:* ‚úÖ Resolved - Jobs now loading successfully"
        }
      },
      {
        type: "section",
        text: {
          type: "mrkdwn",
          text: "*üìù Key Changes Made*\n\n‚Ä¢ Updated `JobberService.getJobs()` to use `/clients/${clientId}/jobs`\n‚Ä¢ Fixed endpoint URL construction in the service\n‚Ä¢ Verified integration with live Jobber API\n‚Ä¢ Confirmed data flow through dashboard"
        }
      },
      {
        type: "divider"
      },
      {
        type: "section",
        text: {
          type: "mrkdwn",
          text: "*üìä Dashboard V3 Current Status*\n\n‚Ä¢ *Backend API:* ‚úÖ Running on port 3005\n‚Ä¢ *Frontend:* ‚úÖ Deployed to Firebase\n‚Ä¢ *Database:* ‚úÖ Firestore configured\n‚Ä¢ *Integrations:* ‚úÖ Jobber, QuickBooks, SendGrid active"
        }
      },
      {
        type: "section",
        text: {
          type: "mrkdwn",
          text: "*üöÄ Working Features*\n\n‚Ä¢ Customer Management (CRUD operations)\n‚Ä¢ Job Management with Jobber sync\n‚Ä¢ Communications hub (Email/SMS)\n‚Ä¢ Real-time sync with external services\n‚Ä¢ Authentication & session management"
        }
      },
      {
        type: "divider"
      },
      {
        type: "section",
        text: {
          type: "mrkdwn",
          text: "*‚ö†Ô∏è Outstanding Issues*\n\n‚Ä¢ Frontend API calls need backend URL update (currently using localhost)\n‚Ä¢ Some TypeScript build warnings in dashboard\n‚Ä¢ Slack integration webhook endpoints need testing\n‚Ä¢ Production deployment configuration pending"
        }
      },
      {
        type: "section",
        text: {
          type: "mrkdwn",
          text: "*üîÑ Next Steps*\n\n1. Update frontend to use production backend URL\n2. Complete Slack webhook integration testing\n3. Set up production environment variables\n4. Deploy backend to cloud hosting\n5. Configure custom domain and SSL"
        }
      },
      {
        type: "context",
        elements: [
          {
            type: "mrkdwn",
            text: "ü§ñ Generated by Claude Code | Dashboard V3 Session Report"
          }
        ]
      }
    ]
  };

  try {
    console.log('üì§ Sending session report to #it-report...');
    
    const response = await axios.post(
      'https://slack.com/api/chat.postMessage',
      message,
      {
        headers: {
          'Authorization': `Bearer ${SLACK_BOT_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );

    if (response.data.ok) {
      console.log('‚úÖ Report sent successfully!');
      console.log(`üì± Message posted to #it-report`);
      console.log(`üîó Message timestamp: ${response.data.ts}`);
    } else {
      console.error('‚ùå Failed to send report:', response.data.error);
    }
  } catch (error) {
    console.error('‚ùå Error sending report:', error.message);
    if (error.response) {
      console.error('Response data:', error.response.data);
    }
  }
}

// Run the report
sendSessionReport();