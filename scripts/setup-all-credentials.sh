#!/bin/bash
# Complete Credential Setup for All MCP Servers
# Sets up credentials for all 27 MCP services

set -euo pipefail

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo -e "${PURPLE}🔐 Complete MCP Server Credential Setup${NC}"
echo -e "${PURPLE}=======================================${NC}\n"

# Create comprehensive .env file if it doesn't exist
if [ ! -f "$HOME/.env" ]; then
    echo -e "${YELLOW}Creating comprehensive ~/.env file...${NC}"
    cat > "$HOME/.env" << 'EOF'
# MCP Server Credentials Configuration
# Generated by setup-all-credentials.sh
# IMPORTANT: Keep this file secure (chmod 600)

# ========================================
# ESSENTIAL SERVICES (Battery Mode)
# ========================================

# Slack - Team notifications
export SLACK_TOKEN=""
export SLACK_WEBHOOK_URL=""

# GitHub - Repository management
export GITHUB_TOKEN=""
export GITHUB_USERNAME=""

# ========================================
# STANDARD SERVICES (Plugged In)
# ========================================

# Google Services
export GOOGLE_CLIENT_ID=""
export GOOGLE_CLIENT_SECRET=""
export GOOGLE_REFRESH_TOKEN=""
export GOOGLE_CALENDAR_ID=""

# Gmail
export GMAIL_USER=""
export GMAIL_APP_PASSWORD=""

# Notion
export NOTION_TOKEN=""
export NOTION_DATABASE_ID=""

# Airtable
export AIRTABLE_API_KEY=""
export AIRTABLE_BASE_ID=""

# QuickBooks
export QUICKBOOKS_CLIENT_ID=""
export QUICKBOOKS_CLIENT_SECRET=""
export QUICKBOOKS_COMPANY_ID=""

# Jobber
export JOBBER_API_KEY=""
export JOBBER_ACCOUNT_ID=""

# SendGrid
export SENDGRID_API_KEY=""
export SENDGRID_FROM_EMAIL=""

# ========================================
# PERFORMANCE SERVICES (Morgan Only)
# ========================================

# Database Services
export POSTGRES_HOST="localhost"
export POSTGRES_PORT="5432"
export POSTGRES_USER=""
export POSTGRES_PASSWORD=""
export POSTGRES_DATABASE=""

export REDIS_HOST="localhost"
export REDIS_PORT="6379"
export REDIS_PASSWORD=""

# Web Automation
export PUPPETEER_EXECUTABLE_PATH=""
export PLAYWRIGHT_BROWSERS_PATH=""

# Confluence
export CONFLUENCE_URL=""
export CONFLUENCE_USER=""
export CONFLUENCE_API_TOKEN=""

# Matterport
export MATTERPORT_API_KEY=""
export MATTERPORT_APPLICATION_KEY=""

# Firebase
export FIREBASE_PROJECT_ID=""
export FIREBASE_PRIVATE_KEY=""
export FIREBASE_CLIENT_EMAIL=""

# Firecrawl
export FIRECRAWL_API_KEY=""

# Tavily Search
export TAVILY_API_KEY=""

# ========================================
# ADDITIONAL SERVICES
# ========================================

# OpenAI (if needed)
export OPENAI_API_KEY=""

# Anthropic (if needed)
export ANTHROPIC_API_KEY=""

# AWS (if needed)
export AWS_ACCESS_KEY_ID=""
export AWS_SECRET_ACCESS_KEY=""
export AWS_REGION="us-east-1"

# ========================================
# APPLICATION SETTINGS
# ========================================

# Claude Auto-Responder
export CLAUDE_MACHINE_ID="$(hostname -s)"
export CLAUDE_CHECK_INTERVAL="60"
export CLAUDE_RATE_LIMIT_BACKOFF="60"

# MCP Settings
export MCP_LOG_LEVEL="info"
export MCP_TIMEOUT="30000"
EOF
    chmod 600 "$HOME/.env"
    echo -e "${GREEN}✅ Created comprehensive ~/.env file${NC}"
else
    echo -e "${YELLOW}⚠️  ~/.env already exists. Backup created at ~/.env.backup${NC}"
    cp "$HOME/.env" "$HOME/.env.backup"
fi

# Function to setup specific service groups
setup_service_group() {
    local group="$1"
    echo -e "\n${BLUE}Setting up $group services...${NC}"
    
    case $group in
        "essential")
            echo -e "${GREEN}Essential services include:${NC}"
            echo "  • Slack - Team notifications"
            echo "  • GitHub - Repository management"
            echo "  • Filesystem - Local file operations (no credentials needed)"
            echo "  • Memory - Persistent memory (no credentials needed)"
            ;;
        "google")
            echo -e "${GREEN}Google services setup:${NC}"
            echo "  1. Go to: https://console.cloud.google.com"
            echo "  2. Create new project or select existing"
            echo "  3. Enable APIs: Calendar, Gmail, Drive"
            echo "  4. Create OAuth 2.0 credentials"
            echo "  5. Download credentials.json"
            ;;
        "productivity")
            echo -e "${GREEN}Productivity services:${NC}"
            echo "  • Notion: https://www.notion.so/my-integrations"
            echo "  • Airtable: https://airtable.com/account"
            echo "  • QuickBooks: https://developer.intuit.com"
            echo "  • Jobber: https://developer.getjobber.com"
            ;;
        "databases")
            echo -e "${GREEN}Database services (Docker recommended):${NC}"
            echo "  docker run -d --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=yourpass postgres"
            echo "  docker run -d --name redis -p 6379:6379 redis"
            ;;
    esac
}

# Interactive setup menu
echo -e "\n${PURPLE}Which services do you want to set up?${NC}"
echo "1. Essential only (Slack, GitHub)"
echo "2. Standard (Essential + Google, Notion, etc)"
echo "3. Performance (All 27 services)"
echo "4. Custom selection"
echo "5. Exit"

read -p "Select option (1-5): " choice

case $choice in
    1)
        setup_service_group "essential"
        ;;
    2)
        setup_service_group "essential"
        setup_service_group "google"
        setup_service_group "productivity"
        ;;
    3)
        setup_service_group "essential"
        setup_service_group "google"
        setup_service_group "productivity"
        setup_service_group "databases"
        ;;
    4)
        echo -e "\n${YELLOW}Edit ~/.env manually to add your specific services${NC}"
        ;;
    5)
        echo -e "${GREEN}Setup cancelled${NC}"
        exit 0
        ;;
esac

# Add to .zshrc if not already there
if ! grep -q "source ~/.env" "$HOME/.zshrc" 2>/dev/null; then
    echo -e "\n${YELLOW}Adding ~/.env to ~/.zshrc...${NC}"
    echo -e '\n# Load environment variables\nsource ~/.env' >> "$HOME/.zshrc"
    echo -e "${GREEN}✅ Added to ~/.zshrc${NC}"
fi

# Validation script
echo -e "\n${BLUE}Creating validation script...${NC}"
cat > "$HOME/validate-credentials.sh" << 'EOF'
#!/bin/bash
# Validate configured credentials

source ~/.env

echo "🔍 Validating credentials..."

# Test Slack
if [ -n "$SLACK_TOKEN" ]; then
    if curl -s -X POST https://slack.com/api/auth.test \
        -H "Authorization: Bearer $SLACK_TOKEN" | grep -q '"ok":true'; then
        echo "✅ Slack token valid"
    else
        echo "❌ Slack token invalid"
    fi
fi

# Test GitHub
if [ -n "$GITHUB_TOKEN" ]; then
    if curl -s -H "Authorization: token $GITHUB_TOKEN" \
        https://api.github.com/user | grep -q '"login"'; then
        echo "✅ GitHub token valid"
    else
        echo "❌ GitHub token invalid"
    fi
fi

# Add more validation as needed
EOF

chmod +x "$HOME/validate-credentials.sh"

# Final instructions
echo -e "\n${GREEN}=== Setup Complete ===${NC}"
echo -e "\n${YELLOW}Next steps:${NC}"
echo "1. Edit ~/.env and add your credentials"
echo "2. Run: source ~/.zshrc"
echo "3. Validate: ~/validate-credentials.sh"
echo "4. Test services individually"

echo -e "\n${BLUE}Token Generation Links:${NC}"
echo "• Slack: https://api.slack.com/apps"
echo "• GitHub: https://github.com/settings/tokens"
echo "• Google: https://console.cloud.google.com"
echo "• Notion: https://www.notion.so/my-integrations"
echo "• SendGrid: https://app.sendgrid.com/settings/api_keys"

echo -e "\n${RED}⚠️  Security Reminder:${NC}"
echo "• Never commit .env files"
echo "• Rotate tokens regularly"
echo "• Use read-only tokens where possible"
echo "• Different tokens per machine recommended"